#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <stdlib.h>
using namespace std;
struct platesStack
{
    int plateNumber;
    platesStack * next;
};
platesStack *topMainPile=NULL;
int findNextPrime(int primeNumber)
{
    int count=1;
    while(primeNumber++)
    {
        for(int i=2;i<primeNumber;i++)
        {
            if(primeNumber%i==0)
                count++;
        }
        if(count==1)
            return primeNumber;
        count=1;
    }
    return -1;
}
platesStack * push(platesStack * top,int plateNumber)
{
    platesStack * head=(platesStack *)malloc(sizeof(platesStack));
    head->plateNumber=plateNumber;
    head->next=NULL;
    if(top==NULL)
    {
        top=head;
    }
    else
    {
        head->next=top;
        top=head;
    }
    return top;
}
int pop(platesStack * top)
{
    int tmp;
    if(top!=NULL)
    {
        tmp=top->plateNumber;
        top=top->next;
        topMainPile=top;
    }    
    else
    {
        tmp=-1;
    }
    return tmp;
}
platesStack * reverseStack(platesStack * stackToBeReverse)
{
    platesStack * tempStack=NULL;
    while(stackToBeReverse!=NULL)
    {
        tempStack=push(tempStack,stackToBeReverse->plateNumber);
        stackToBeReverse=stackToBeReverse->next;
    }
    return tempStack;
}
int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    int N,Q,plateNumber,Prime=2;
    platesStack *topPrime_Divided=NULL;
    platesStack *topPrime_Not_Divided=NULL;
    cin>>N>>Q;
    for(int i=0;i<N;i++)
    {
        cin>>plateNumber;
        topMainPile=push(topMainPile,plateNumber);
    }
    topMainPile=reverseStack(topMainPile);
    for(int i=1;i<=Q;i++)
    {
        int topPlate=pop(topMainPile);
        topPrime_Not_Divided=NULL;
        while(topPlate!=-1)
        {
            if(topPlate%Prime==0)
                topPrime_Divided=push(topPrime_Divided,topPlate);
            else
                topPrime_Not_Divided=push(topPrime_Not_Divided,topPlate);
            topPlate=pop(topMainPile);
        }
       // topMainPile=reverseStack(topPrime_Not_Divided);
        topMainPile=topPrime_Not_Divided;
        Prime=findNextPrime(Prime);
    }
    topPrime_Divided=reverseStack(topPrime_Divided);
    while(topPrime_Divided!=NULL)
    {
        cout<<topPrime_Divided->plateNumber<<"\n";
        topPrime_Divided=topPrime_Divided->next;
    }
    topPrime_Not_Divided=reverseStack(topPrime_Not_Divided);
    while(topPrime_Not_Divided!=NULL)
    {
        cout<<topPrime_Not_Divided->plateNumber<<"\n";
        topPrime_Not_Divided=topPrime_Not_Divided->next;
    }
    return 0;
}
