#include <math.h>
/* Node is defined as :
typedef struct node
{
    int val;
    struct node* left;
    struct node* right;
    int ht;
} node; */
int heightMax(node * root)
{
	int maxHeight = -1;
	if(root->left != NULL)
		maxHeight = max(maxHeight, root->left->ht);
	if(root->right != NULL)
		maxHeight = max(maxHeight, root->right->ht);
	return maxHeight;
}
	
int balanceFactor(node * root)
{
    int left = -1;
	int right = -1;
	if(root->left != NULL)
		left = root->left->ht;
	if(root->right != NULL)
		right = root->right->ht;
	return (left - right);
}
node * rotateLeft(node * x)
{
    node * y = x->right;
	x->right = y->left;
	y->left = x;
	// height
	x->ht = heightMax(x)+1;
	y->ht = heightMax(y)+1;
	return y;
}
node * rotateRight(node * x)
{
    node *y = x->left;
	x->left = y->right;
	y->right = x;
	// height
	x->ht = heightMax(x)+1;
	y->ht = heightMax(y)+1;
	return y;
}
node * insert(node * root,int val)
{
    if(root==NULL)
    {
        node * temp=(node *)malloc(sizeof(node));
        temp->val=val;
        temp->left=temp->right=NULL;
        temp->ht=0;
        return temp;
    }
    if(val<root->val)
        root->left=insert(root->left,val);
    else
        root->right=insert(root->right,val);
    int balanceFactor1=balanceFactor(root);
    if(balanceFactor1<-1)
    {
        if(balanceFactor(root->right)>0)
        {
            root->right = rotateRight(root->right);
            return rotateLeft(root);
        }
        else
           return rotateLeft(root);
    }
    else
    {
        if(balanceFactor1 > 1)
        {
            if(balanceFactor(root->left) < 0)
            {
                root->left = rotateLeft(root->left);
				return rotateRight(root);
            }
            else
				return rotateRight(root);
        }
    }
	root->ht = heightMax(root) + 1;
	return root;
}

